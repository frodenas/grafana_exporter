// Code generated by counterfeiter. DO NOT EDIT.
package grafanafakes

import (
	"sync"

	"github.com/frodenas/grafana_exporter/grafana"
)

type FakeClient struct {
	GetAdminStatsStub        func() (grafana.AdminStats, error)
	getAdminStatsMutex       sync.RWMutex
	getAdminStatsArgsForCall []struct{}
	getAdminStatsReturns     struct {
		result1 grafana.AdminStats
		result2 error
	}
	getAdminStatsReturnsOnCall map[int]struct {
		result1 grafana.AdminStats
		result2 error
	}
	GetMetricsStub        func() (grafana.Metrics, error)
	getMetricsMutex       sync.RWMutex
	getMetricsArgsForCall []struct{}
	getMetricsReturns     struct {
		result1 grafana.Metrics
		result2 error
	}
	getMetricsReturnsOnCall map[int]struct {
		result1 grafana.Metrics
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) GetAdminStats() (grafana.AdminStats, error) {
	fake.getAdminStatsMutex.Lock()
	ret, specificReturn := fake.getAdminStatsReturnsOnCall[len(fake.getAdminStatsArgsForCall)]
	fake.getAdminStatsArgsForCall = append(fake.getAdminStatsArgsForCall, struct{}{})
	fake.recordInvocation("GetAdminStats", []interface{}{})
	fake.getAdminStatsMutex.Unlock()
	if fake.GetAdminStatsStub != nil {
		return fake.GetAdminStatsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getAdminStatsReturns.result1, fake.getAdminStatsReturns.result2
}

func (fake *FakeClient) GetAdminStatsCallCount() int {
	fake.getAdminStatsMutex.RLock()
	defer fake.getAdminStatsMutex.RUnlock()
	return len(fake.getAdminStatsArgsForCall)
}

func (fake *FakeClient) GetAdminStatsReturns(result1 grafana.AdminStats, result2 error) {
	fake.GetAdminStatsStub = nil
	fake.getAdminStatsReturns = struct {
		result1 grafana.AdminStats
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetAdminStatsReturnsOnCall(i int, result1 grafana.AdminStats, result2 error) {
	fake.GetAdminStatsStub = nil
	if fake.getAdminStatsReturnsOnCall == nil {
		fake.getAdminStatsReturnsOnCall = make(map[int]struct {
			result1 grafana.AdminStats
			result2 error
		})
	}
	fake.getAdminStatsReturnsOnCall[i] = struct {
		result1 grafana.AdminStats
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetMetrics() (grafana.Metrics, error) {
	fake.getMetricsMutex.Lock()
	ret, specificReturn := fake.getMetricsReturnsOnCall[len(fake.getMetricsArgsForCall)]
	fake.getMetricsArgsForCall = append(fake.getMetricsArgsForCall, struct{}{})
	fake.recordInvocation("GetMetrics", []interface{}{})
	fake.getMetricsMutex.Unlock()
	if fake.GetMetricsStub != nil {
		return fake.GetMetricsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getMetricsReturns.result1, fake.getMetricsReturns.result2
}

func (fake *FakeClient) GetMetricsCallCount() int {
	fake.getMetricsMutex.RLock()
	defer fake.getMetricsMutex.RUnlock()
	return len(fake.getMetricsArgsForCall)
}

func (fake *FakeClient) GetMetricsReturns(result1 grafana.Metrics, result2 error) {
	fake.GetMetricsStub = nil
	fake.getMetricsReturns = struct {
		result1 grafana.Metrics
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetMetricsReturnsOnCall(i int, result1 grafana.Metrics, result2 error) {
	fake.GetMetricsStub = nil
	if fake.getMetricsReturnsOnCall == nil {
		fake.getMetricsReturnsOnCall = make(map[int]struct {
			result1 grafana.Metrics
			result2 error
		})
	}
	fake.getMetricsReturnsOnCall[i] = struct {
		result1 grafana.Metrics
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAdminStatsMutex.RLock()
	defer fake.getAdminStatsMutex.RUnlock()
	fake.getMetricsMutex.RLock()
	defer fake.getMetricsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ grafana.Client = new(FakeClient)
